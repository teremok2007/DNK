<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="data_box0" label="Add Data Box" icon="/studio/abc/users/bocharov/cooper/cooper/icons/data_box.svg">
    <script scriptType="python"><![CDATA[get_data_str='''

import os
import sys
cooper_libs =os.environ['COOPER_LIBS']
lib_path = os.path.abspath(cooper_libs)
sys.path.append(lib_path)

import cooper_data as cu_dat
import cooper_init as cu_init

import json
import re

init_cuper = cu_init.Cooper_Globals()    
cu_proj = init_cuper['cooper_proj']

cu_dict={}
cu_ver={}
cu_objects=[]

#node = hou.node("/obj/geo1/null1")
node = hou.pwd()
my_name=node.name()

cu_mode=node.parm('cu_mode').eval()
cu_mode_label=node.parm('cu_mode').menuLabels()[cu_mode]

cu_data_path=node.parm('cu_data_path').eval()
cu_data_path_arr=cu_data_path.split('/')
group=cu_data_path_arr[1]
proj=cu_data_path_arr[0]

cu_moni = cu_proj + '/' + proj + '/' + group
if not os.path.exists(cu_moni):
    os.makedirs(cu_moni)


cu_obj=cu_dat.GetObjects(group , proj , cu_mode_label)
cu_out_arr=[]
if cu_obj != ['']:
    for cu_it in cu_obj:
    
        cu_arr=cu_it.split('::Keys::')
        cu_out_arr.append(cu_arr[0])
        cu_dict[cu_arr[0]]=cu_arr[1]
        cu_ver[cu_arr[0]]=cu_arr[2]



choices = cu_out_arr
selected = hou.ui.selectFromTree(choices)
if selected !=[]:
    node.parm("cu_data_name").set(selected[0])
    node.parm("cu_multydata_keys").set(cu_dict[selected[0]])
    node.parm("cu_versions").set(cu_ver[selected[0]])
'''









app_data_str='''

import os
import sys
import cooper_data as cu_dat
import json
import re
cooper_libs =os.environ['COOPER_LIBS']
lib_path = os.path.abspath(cooper_libs)
sys.path.append(lib_path)



cu_objects=[]

node = hou.pwd()

res_obj=node.parm('cu_data_name').eval()
get_rule=node.parm('cu_get_data_rule').eval()
frame_format=node.parm('cu_frame_format').eval()
path=node.parm('cu_data_path').eval()
proj=path.split('/')[0]
group=path.split('/')[1]
objects_branches=res_obj.split('::')

cu_mode=node.parm('cu_mode').eval()
cu_mode_label=node.parm('cu_mode').menuLabels()[cu_mode]
cu_multy_keys_str=node.parm('cu_multydata_keys').eval()
cu_version_str=node.parm('cu_versions').eval()

app_arr = cu_dat.ApplyData(group , proj , objects_branches[0] , objects_branches[1] , get_rule , frame_format , cu_mode_label , cu_multy_keys_str , cu_version_str)





g = node.parmTemplateGroup()
id = g.findIndices("cu_apply")

for it in app_arr.keys():
    parm_name=it
    cur_parm = node.parm(parm_name)

    if cur_parm == None:
        
        parameter = hou.StringParmTemplate(parm_name, parm_name,1)
        g.insertAfter(id, parameter)
        node.setParmTemplateGroup(g)
        

    node.parm(parm_name).set(app_arr[it])
               
   


'''






reg_data_str='''

import os
import sys
cooper_libs =os.environ['COOPER_LIBS']
lib_path = os.path.abspath(cooper_libs)
sys.path.append(lib_path)

import cooper_data as cu_dat
import cooper_init as cu_init

import json
import re

#node = hou.node("/obj/geo1/null1")
node = hou.pwd()
my_name=node.name()

reg_data={}

cu_reg_data_path=node.parm('cu_reg_data_path').eval()
cu_reg_data_name=node.parm('cu_reg_data_name').eval()
cu_reg_data_rule=node.parm('cu_reg_data_rule').eval()

init_cuper = cu_init.Cooper_Globals() 



directory_name = init_cuper['cooper_proj'] + '/' + str(cu_reg_data_path)
data_name = str(directory_name) + '/' + str(cu_reg_data_name) +'.dbox'

if not os.path.exists(directory_name):
    os.makedirs(directory_name)
    
if not os.path.exists(data_name):
    reg_data['rule']=str(cu_reg_data_rule)
    reg_data['valid_version']='0000'
    
    with open(data_name, "w") as write_file:
        json.dump(reg_data, write_file ,indent=4)
    
else:
    with open(data_name) as f:
        data_file = json.load(f)
    
    data_file['rule']=cu_reg_data_rule
    with open(data_name, "w") as write_file:
        json.dump(data_file, write_file ,indent=4)
    
'''







where_str='''

import os
import sys

cooper_libs = os.environ['COOPER_LIBS']
lib_path = os.path.abspath(cooper_libs)
sys.path.append(lib_path)

import hou
import cooper_monitors as cu_moni
import cooper_init as cu_init

import json
import re




script_path = hou.hscriptExpression('$HIP')
print script_path

node = hou.pwd()


where_am_i = cu_moni.where_am_i(script_path)

if where_am_i != {} :
    res= where_am_i['PRJ'] +'/' + where_am_i['GROUP']
    node.parm('cu_reg_data_path').set(res)
    node.parm('cu_data_path').set(res)
else:
    node.parm('cu_reg_data_path').set('Not found')
    node.parm('cu_data_path').set('Not found')


'''























def make_top_level_folder(node, name, label):

    parm_tg = node.parmTemplateGroup()
    
    top_folder = hou.FolderParmTemplate(name, label, parm_tg.entries())   
    parm_tg.clear()
    parm_tg.addParmTemplate(top_folder)      
    node.setParmTemplateGroup(parm_tg)     
    return top_folder

    
  
for n in hou.selectedNodes():

    node_name=str(n.name())

    cur_folder=make_top_level_folder(n, "cu_main", "Main")

    data_box_folder = hou.FolderParmTemplate('dbox', 'Data Box')   
    reg_folder=hou.FolderParmTemplate('data_reg', 'Data Box Register') 
    
    g = n.parmTemplateGroup()
    id = g.findIndices("cu_main")
    
    

    
    were_am_btn = hou.ButtonParmTemplate("cu_where", "Where Am I", script_callback=where_str, join_with_next=False ,script_callback_language=hou.scriptLanguage.Python)
    apply_data_btn = hou.ButtonParmTemplate("cu_apply", "Apply Data", script_callback=app_data_str, join_with_next=False ,script_callback_language=hou.scriptLanguage.Python)
    get_data_btn = hou.ButtonParmTemplate("cu_get", "Get Data", script_callback=get_data_str, join_with_next=False ,script_callback_language=hou.scriptLanguage.Python)
    
    path = hou.StringParmTemplate("cu_data_path", "Data Box Path",1,join_with_next=True )
    name = hou.StringParmTemplate("cu_data_name", "Data Name",1,join_with_next=True )
    multy_keys = hou.StringParmTemplate("cu_multydata_keys", "Mylty Data Keys",1 )
    versions = hou.StringParmTemplate("cu_versions", "Versions",1 )
    mode = hou.MenuParmTemplate('cu_mode', 'Mode', ('Get', 'Push'), ('Get', 'Push'), 0 , join_with_next=True)
    get_data_rule = hou.StringParmTemplate("cu_get_data_rule", "Get Data Rule", 1 , join_with_next=True)
    frame_format = hou.StringParmTemplate("cu_frame_format", "Frame Format", 1 )
    sep = hou.SeparatorParmTemplate("Sep")
    
    data_box_folder.addParmTemplate(mode)
    data_box_folder.addParmTemplate(get_data_rule)
    data_box_folder.addParmTemplate(frame_format)
    data_box_folder.addParmTemplate(path)
    data_box_folder.addParmTemplate(were_am_btn)
    
    data_box_folder.addParmTemplate(name)
    data_box_folder.addParmTemplate(get_data_btn)
    data_box_folder.addParmTemplate(multy_keys)
    data_box_folder.addParmTemplate(versions)
    data_box_folder.addParmTemplate(apply_data_btn)
    data_box_folder.addParmTemplate(sep)
    
    
    reg_path = hou.StringParmTemplate("cu_reg_data_path", "Data Box Path",1,join_with_next=True )
    reg_name = hou.StringParmTemplate("cu_reg_data_name", "Data Name",1,join_with_next=False )
    reg_rule = hou.StringParmTemplate("cu_reg_data_rule", "Data Rule",1,join_with_next=False )
    reg_create_data_box = hou.ButtonParmTemplate("cu_reg_create", "Create/Update BataBox", script_callback=reg_data_str, join_with_next=False ,script_callback_language=hou.scriptLanguage.Python)
    reg_were_am_btn = hou.ButtonParmTemplate("cu_reg_where", "Where Am I", script_callback=where_str, join_with_next=False ,script_callback_language=hou.scriptLanguage.Python)
    
    reg_folder.addParmTemplate(reg_path)
    reg_folder.addParmTemplate(reg_were_am_btn)
    reg_folder.addParmTemplate(reg_name)
    reg_folder.addParmTemplate(reg_rule)
    reg_folder.addParmTemplate(reg_create_data_box)
    
    g.insertAfter(id, data_box_folder)
    
    id_d = g.findIndices("dbox")
    g.insertAfter(id_d, reg_folder)
    n.setParmTemplateGroup(g)
    
    
    
    
    
    n.parm('cu_data_path').set('$PROJ/$SHOT')
    n.parm('cu_get_data_rule').set('vld')
    n.parm('cu_frame_format').set('houdini')
    
    
    
    
    
    
    
    
]]></script>
  </tool>
</shelfDocument>
