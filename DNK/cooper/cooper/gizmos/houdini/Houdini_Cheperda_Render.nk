set cut_paste_input [stack 0]
version 12.1 v3
push $cut_paste_input
DirectLight {
translate {6.519999981 0 -45.3}
rotate {60 0 0}
depthmap_slope_bias 0.01
name DirectLight1
selected true
xpos 33683
ypos 1650
}
Camera2 {
inputs 0
translate {9.001703262 0.9430279732 -56.30714798}
rotate {3.014814138 168.9000549 -0.003208706621}
name Camera1
selected true
xpos 33460
ypos 1844
}
Group {
inputs 0
name Hou_Cheperda_Render
tile_color 0x55bfffff
label "\n\n"
note_font "Noto Sans Carian Bold Italic"
note_font_size 20
selected true
xpos 33673
ypos 1859
addUserKnob {20 Settings}
addUserKnob {4 cache_version l "Cache Version" t "v_0001\nv_0002\nv_0003\nv_0004\nv_0005" M {v_0001 v_0002 v_0003 v_0004 v_0005 ""}}
cache_version v_0005
addUserKnob {22 update l "Cache Update" -STARTLINE T "\ngroupNode = nuke.thisNode()\nabc_name=groupNode.knob('cache_version').value()\nstr_abc=str(\"/studio/proj/FAU/work/Cheperda/3d/abc/asset/\")+str(abc_name)+str(\".abc\")\nstr_geo=str(\"/studio/proj/FAU/work/Cheperda/3d/geo/\")+str(abc_name)+str(\"/sim_data.\$F.bgeo.sc\")\n\nwith groupNode:\n    all_nodes = nuke.allNodes(recurseGroups=False)\n    for i in all_nodes:\n        if i.name()==\"abc_read\":\n            i.knob('file').setValue(str_abc)"}
addUserKnob {2 scenes l Scenes t "Path to houdini scene\n\nExample:\n\n/path_to_scene/you_scene.hou" +INVISIBLE}
scenes /studio/proj/FAU/work/Cheperda/3d/Cheperda_asset_v0001.hip
addUserKnob {2 image l "Out Dir"}
image /studio/proj/FAU/work/Cheperda/3d/render/CHE_ASS_V0001/
addUserKnob {26 ""}
addUserKnob {26 CameraSetting}
addUserKnob {7 tx}
tx {{Camera1.translate.x}}
addUserKnob {7 ty -STARTLINE}
ty {{Camera1.translate.y}}
addUserKnob {7 tz -STARTLINE}
tz {{Camera1.translate.z}}
addUserKnob {7 rx}
rx {{Camera1.rotate.x}}
addUserKnob {7 ry -STARTLINE}
ry {{Camera1.rotate.y}}
addUserKnob {7 rz -STARTLINE}
rz {{Camera1.rotate.z}}
addUserKnob {26 ""}
addUserKnob {7 focal l Focal}
focal {{Camera1.focal}}
addUserKnob {7 aperture l Aperture}
aperture {{Camera1.haperture}}
addUserKnob {26 ""}
addUserKnob {3 rezx l RezX}
rezx 6096
addUserKnob {3 rezy l RezY -STARTLINE}
rezy 2400
addUserKnob {3 overscan_x l "Overscan X"}
overscan_x 400
addUserKnob {3 overscan_y l "Overscan Y" -STARTLINE}
overscan_y 400
addUserKnob {26 ""}
addUserKnob {7 l_rx l Light_Rot_X}
l_rx {{DirectLight1.rotate.x}}
addUserKnob {7 l_ry l Light_Rot_Y -STARTLINE}
l_ry {{DirectLight1.rotate.y}}
addUserKnob {7 l_rz l Light_Rot_Z -STARTLINE}
l_rz {{DirectLight1.rotate.z}}
addUserKnob {26 ""}
addUserKnob {1 start l Start}
start 1001
addUserKnob {1 end l End -STARTLINE}
end 1020
addUserKnob {1 step l Step -STARTLINE}
step 1
addUserKnob {20 afanasy l Afanasy}
addUserKnob {1 hostmask l HostsMask}
addUserKnob {1 hostmaskexclude l HostmaskExclude}
addUserKnob {20 LowLevel}
addUserKnob {6 local l LocalTask +STARTLINE}
addUserKnob {22 a l INVISIBLE +INVISIBLE T "from __future__ import with_statement\nimport nuke\nimport nukescripts\nnode=nuke.thisNode()\ninternalAttr = nuke.Multiline_Eval_String_Knob(\"fgh\")\nnode.addKnob(internalAttr)" +STARTLINE}
addUserKnob {26 ""}
addUserKnob {26 "" l Script}
addUserKnob {22 AddScript T "node=nuke.thisNode()\nnodename=node.name()\nscriptnameVal=node.knob(\"scriptname\").value()\nif (scriptnameVal !=\"\"):\n\tscriptcode=scriptnameVal\nelse:\n\tscriptcode=node.knob(\"scriptname\").setValue(nodename)\n\nscriptlocation=node.knob(\"scriptlocation\").value()\nscriptname=node.knob(\"scriptname\").value()\noutLog=\"\"\nif (scriptlocation !=\"\"):\n\t\n\n\tfileName=str(scriptlocation)+str(scriptname)+str('.prescr')\n\n\tif os.path.exists(fileName):\n\t\toutLog=\"This file exists\"\n\telse:\n\t\tf=open(fileName, 'w')\n\t\tf.write('#you code\\n')\n\t\tf.close()\n\t\toutLog=\"File Created\"\n\n\nelse:\n\toutLog=\"Enter Script Location Directory\"\n\n\ndef panel_example(node):\n  p = nuke.Panel(\"Logs\")\n  p.addMultilineTextInput(\"OUT:\", outLog)\n  p.addButton(\"OK\")\n  result = p.show()\n\nmynode=nuke.thisNode()\npanel_example(mynode)" +STARTLINE}
addUserKnob {22 EditScript -STARTLINE T "import getpass\nimport time\nimport os\nimport re\nimport sys\nimport shutil\n\n\n\n\n\nnode=nuke.thisNode()\nval=str(node.knob(\"scriptname\").value())\nprint val\nfileName=str(node.knob(\"scriptlocation\").value())\nfile=fileName+val+str('.prescr')\n\nif os.path.exists(file):\n    message=str(\"File-    \\\"\")+str(file)+str(\"\\\"     Found\")\n    print message\nelse:\n    message=str(\"File-    \\\"\")+str(file)+str(\"\\\"     NotFound\")\n    print message\n\n\n\nos.popen4(\"xed \"+str(file))"}
addUserKnob {1 scriptname l ScriptName}
scriptname hou_cheperda_render_v0001
addUserKnob {1 extention l Extention -STARTLINE}
extention py
addUserKnob {2 scriptlocation l "Script Location"}
scriptlocation /studio/abc/users/bocharov/cooper/tmp/scripts/
addUserKnob {22 updateout l "View Out Script" T "\n\n\n\n\n\n\nfrom __future__ import with_statement\nimport nuke\nimport nukescripts\n\nfileCuperScriptDir=\"//a-vfx/stuff/tools/Nuke60/SharedPlugins/cooper/scripts\"\n\ndef re_script(txt):\n\n    import re\n    \n\n    r1= re.compile(r'<<\[^>>]+>>') \n    a=re.findall(r1,txt)\n    txtOut=txt\n    \n    for i in a:\n        preitem=re.sub('<<','',i)\n        item=re.sub('>>','',preitem)\n\n        itemval=str(node.knob(item).value())\n\n        txtOut=re.sub(i,itemval , txtOut )\n    return txtOut\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport sys\n\nnode=nuke.thisNode()\nnodename=node.name()\n\n\nval=str(node.knob(\"scriptname\").value())\nfileName=str(node.knob(\"scriptlocation\").value())\nfileName+=str(\"/\")+val+str('.prescr')\n\n\nif os.path.exists(fileName):\n    message=str(\"File-    \\\"\")+str(fileName)+str(\"\\\"     Found\")\n    print message\nelse:\n    message=str(\"File-    \\\"\")+str(fileName)+str(\"\\\"     Not Found\\n\\tUse Predifened Directory - \\\"../cooper/scripts\\\"\") \n    print message\n    fileName=fileCuperScriptDir+str(\"/\")+val+str('.prescr')\n\n\n\n\n\n\n\nf=open(fileName, 'r')\n\n\n\nimport nuke\nmultilineTextInput = str(f.read())\nmultilineTextOutput=re_script(multilineTextInput)\n\n\n\n\ndef panel_example():\n  p = nuke.Panel(\"Test Panel\")\n\n  p.addMultilineTextInput(\"OUT:\", multilineTextOutput)\n\n  p.addButton(\"OK\")\n  result = p.show()\n\npanel_example()" +STARTLINE}
addUserKnob {26 "" l "Script Counter"}
addUserKnob {6 usecounter l "Use Counter" +STARTLINE}
usecounter true
addUserKnob {1 ropnode l ROP_Node t "Path to ROP node in Houdini scene \n\nExample:\n\n/out/mantra1"}
ropnode /out/CHEPERDA_ASSET
addUserKnob {1 command l ResultCommand}
command "/studio/proj/FAU/.pipeline_cfg/hou_FAU.sh ; /studio/tools/hou/hfs18.0.499/bin/hython <<scriptlocation>>compile/<<scriptname>>_<<name>>.<<extention>> <<scenes>> <<FF1>> <<FF4>>"
addUserKnob {22 viewoutcommand l ViewOutCommand -STARTLINE T "from __future__ import with_statement\nimport nuke\nimport nukescripts\nimport sys\nimport re\n\ndef re_script(txt,nodeb):\n\n\n    r1= re.compile(r'<<\[^>>]+>>') \n    a=re.findall(r1,txt)\n    txtOut=txt    \n    for i in a:\n        preitem=re.sub('<<','',i)\n        item=re.sub('>>','',preitem)\n        if (nodeb.knob(item)!=None):\n            itemval=str(nodeb.knob(item).value())\n        elif (item=='<<NODENAME>>'):\n            itemval=nodeb.name()\n        else:\n            itemval=\"ERRORAAA\"\n        txtOut=re.sub(i,itemval , txtOut )\n\n    return txtOut\n\n\ndef re_frame(txt,fr):\n    import re\n    r1= re.compile(r'<<FF\[^>>]+>>') \n    a=re.findall(r1,txt)\n    txtOut=txt\n    for i in a:\n        preitem=re.sub('<<FF','',i)\n        item=re.sub('>>','',preitem)        \n        padding = int(item)\n        frame = fr\n        txt = \"%0*d\" % (padding, frame) \n        txtOut=re.sub(i,txt , txtOut )    \n    return txtOut\n\n\n\n\n\ndef get_command(node):\n    nodename=node.name()\n    com=str(node.knob(\"command\").value())\n    multilineTextInput = str(com)\n    multilineTextOutput=re_frame(multilineTextInput,1)\n    multilineTextOutput=re_script(multilineTextOutput,node)\n    return multilineTextOutput\n\n\ndef panel_example(node):\n  p = nuke.Panel(\"Test Panel\")\n  p.addMultilineTextInput(\"OUT:\", get_command(node))\n  p.addButton(\"OK\")\n  result = p.show()\n\nmynode=nuke.thisNode()\npanel_example(mynode)"}
}
ReadGeo2 {
inputs 0
file /studio/proj/FAU/work/Cheperda/3d/abc/asset/v_0005.abc
read_on_each_frame true
use_geometry_colors false
range_first 1001
range_last 1150
scene_view {{0} imported: 0 selected: 0 items: /root/SIM_RBD/attribdelete1}
name abc_read
selected true
xpos 28
ypos 267
}
Output {
name Output1
xpos 66
ypos 428
}
Input {
inputs 0
name Input1
xpos 68
ypos 18
}
end_group
