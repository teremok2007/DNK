set cut_paste_input [stack 0]
version 12.1 v4
BackdropNode {
 inputs 0
 name GetData
 tile_color 0x56822bff
 label "db : \[value result_data] \[value cu_info]\n"
 note_font "DejaVu Sans Bold Italic"
 note_font_size 20
 selected true
 xpos 655
 ypos -515
 bdwidth 206
 bdheight 206
 z_order 5
 addUserKnob {20 User}
 addUserKnob {6 is_data_get l DataGet +INVISIBLE +STARTLINE}
 addUserKnob {4 cu_mode l Mode M {Get Push ""}}
 addUserKnob {1 proj l Project}
 addUserKnob {1 group_name l "Group Name" -STARTLINE}
 addUserKnob {22 where_am_i l "Where am I" -STARTLINE T "import os\nimport sys\n\n\nimport cooper_monitors as cu_moni\nimport cooper_init as cu_init\n\nimport json\nimport re\n\n\n\n\nscript_name=nuke.root().knob('name').value()\n\n\nnode=nuke.thisNode()\n#node=nuke.selectedNode()\n\nwhere_am_i= cu_moni.where_am_i(os.path.dirname(script_name))\nif where_am_i != \{\} :\n    node.knob('proj').setValue(where_am_i\['ALL']\['PROJ']\[0])\n    node.knob('group_name').setValue(str(where_am_i\['ALL']\['GROUP']\[0]))\n    proj_string = json.dumps(where_am_i)\n\n\n    node.knob('proj_data').setValue(proj_string)\nelse:\n    node.knob('proj').setValue('not_found')\n    node.knob('group_name').setValue('not_found')\n"}
 addUserKnob {1 proj_data l "Proj Data" +INVISIBLE}
 addUserKnob {1 result_data l DataBox}
 addUserKnob {4 re_rule l Re_Rule -STARTLINE M {Default ""}}
 addUserKnob {22 get_data l "Get\\Update Data" -STARTLINE T "import cooper_data as cu_dat\nimport cooper_init as cu_init\nimport cooper_monitors as cu_moni\n\nimport json\nimport nuke\nimport re\nimport os\nimport nukescripts\n\n\n\n\n\ndef get_result_settings(proj_data , in_setting , data_box_name , de_rule ):\n    dict_out=\{\}\n    in_sett_dict=json.loads(in_setting)\n    print in_sett_dict\n    init_cuper = cu_init.Cooper_Globals()  \n    cu_proj = init_cuper\['cooper_proj']\n    data_path=str(cu_proj)+str(proj_data\['ALL']\['PROJ']\[0])+'/'+str(proj_data\['ALL']\['GROUP']\[0])+'/'+str(data_box_name)+'.dbox'\n    dict_out=\{\}\n\n    dat=\{\}\n    with open(data_path) as f:\n        dat = json.load(f)\n    print dat\n    if 'de_rule' in dat:\n        if de_rule in dat\['de_rule']:\n            dict_out=dat\['de_rule']\[de_rule]\n    \n    for i in in_sett_dict.keys():\n        dict_out\[i]=in_sett_dict\[i]\n\n    return dict_out\n\n\n\n\n\n\ndef get_de_str(dt , br , ver , mult , de_ru , gr , pr , in_node):\n    \n    de_rule_default = \{ 'v':'vld' , 'f':'nk' , 'set':\{\} \}\n    in_node.knob('version_info').setVisible(True)\n    in_node.knob('valid_this').setVisible(True)\n\n    \n    init_cuper = cu_init.Cooper_Globals()  \n    cu_proj = init_cuper\['cooper_proj']\n    data_path=cu_proj+pr+'/'+gr+'/'+str(dt)+'.dbox'\n    de_rule_default\['b'] = br\n    mult_arr=json.loads(mult.replace('\\'','\\\"'))\n\n        \n        \n    print 'MARR'\n    print mult_arr\n    for i_m in mult_arr:\n        de_rule_default\['set']\[i_m]='.file'\n        \n    if mult=='\[]':   \n        de_rule_default\['set']\['simple']='.file'\n    \n    \n    if de_ru=='none':\n        pre_out=json.dumps(de_rule_default)\n        out=str(pre_out).replace(',', '  ,  ').replace('\{','\{  ').replace('\}','  \}')\n        return str(out)\n    \n    \n\n    dr=\{\}\n    re_dict=\{\}\n    with open(data_path) as f:\n        dr = json.load(f)\n    if 'de_rule' not in dr:\n        print 'ohh noooo'\n    else:\n        re_dict=dr\['de_rule']\[de_ru]\n\n    print de_rule_default\n    print re_dict\n    if 'v' in re_dict:\n        del de_rule_default\['v']\n        in_node.knob('version_info').setVisible(False)\n        in_node.knob('valid_this').setVisible(False)\n        \n    if 'b' in re_dict:\n        del de_rule_default\['b']    \n    \n    if 'f' in re_dict:\n        del de_rule_default\['f']    \n    \n    if 'set' in re_dict:\n        del de_rule_default\['set']  \n    print \"DR\"\n    pre_out=json.dumps(de_rule_default)\n    out=str(pre_out).replace(',', '  ,  ').replace('\{','\{  ').replace('\}','  \}')\n    return out\n\n\n\n\n\n\n\n\n\n\ndef push(panel,in_node,in_dict,in_ver):\n    res=panel.knobs()\['Get'].value()\n    gr=in_node.knob('group_name').value()\n    pr=in_node.knob('proj').value()\n\n    \n\n\n\n\n    init_cuper = cu_init.Cooper_Globals()  \n    cu_proj = init_cuper\['cooper_proj']\n    data_path=str(cu_proj)+str(pr)+'/'+str(gr)+'/'+str(res.split('::')\[0])+'.dbox'\n    \n    dat=\{\}\n    list_re_rules=\[]\n    node.knob('re_rule').setValues(list_re_rules)\n    with open(data_path) as f:\n        dat = json.load(f)\n    if 'de_rule' in dat:\n        list_re_rules=dat\['de_rule'].keys()\n    list_re_rules.append('Default')\n    node.knob('re_rule').setValues(list_re_rules)\n    \n    if 'nuke' in list_re_rules:\n        node.knob('re_rule').setValue('nuke')\n\n\n\n\n    \n    in_node.knob('result_data').setValue(str(res.split('::')\[0]))\n    in_node.knob('cu_info').setValue(str(in_dict\[res]))\n\n    dt=res.split('::')\[0]\n    br=res.split('::')\[1]\n    \n\n    in_node.knob('version_info').setValues(\[])\n    ver_arr=eval(in_ver\[res])\n    ver_arr.sort()\n    ver_arr.insert(0,'lv')\n    ver_arr.insert(0,'vld')\n    in_node.knob('version_info').setValues(ver_arr)\n    in_node.knob('version_info').setValue('vld')\n    a=get_de_str(dt , br , in_ver , in_dict\[res] , 'nuke' , gr , pr ,in_node)\n\n    get_sett=json.loads(a)\n    in_node.knob('set').setVisible(True)\n    if ('f' not in get_sett) and ('set' not in get_sett):\n        in_node.knob('set').setVisible(False)\n\n    in_node.knob('set').setValue(a)\n\n    panel.finishModalDialog(True)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnode=nuke.thisNode()\n#node=nuke.selectedNode()    \n\ninit_cuper = cu_init.Cooper_Globals()    \ncu_proj = init_cuper\['cooper_proj']\n\nscript_name=nuke.root().knob('name').value()\nget_pr= cu_moni.where_am_i(os.path.dirname(script_name))\n\n\n\ncu_dict=\{\}\ncu_ver=\{\}\ncu_objects=\[]\n\n\nmy_name=node.name()\n\nproj=json.loads(node.knob('proj_data').value())\nmode=node.knob('cu_mode').value()\nres_data=node.knob('result_data').value()\n\ncu_moni = cu_proj + '/' + proj\['ALL']\['PROJ']\[0] + '/' + proj\['ALL']\['GROUP']\[0]\nif not os.path.exists(cu_moni):\n    os.makedirs(cu_moni)\n\n\ncu_obj=\[]\nr_rul='none'\ndbox=''\n\n\n\nif res_data=='':\n\n    cu_obj=cu_dat.GetObjects(proj , mode)\n\nelse:\n\n    #####_____GET_CURRENT_BRANCH_____CREATE_DATA_LIKE_____DATA::/BRANCH____#####\n    r_rul=node.knob('re_rule').value()\n    if r_rul=='Default':\n        r_rul='none'\n    sett=get_result_settings(proj , str(node.knob('set').value()) , res_data.split('::')\[0] , r_rul )\n    print sett\n    data_br=sett\['b']    \n    dbox=str(res_data.split('::')\[0])+str('::')+str(data_br)\n    #####_____RE_GET_THIS_DATA____#######\n    cu_obj.append(cu_dat.UpdateObjects( proj ,mode , dbox))\n\n\ncu_out_arr=\[]\nif cu_obj != \[''] :\n    for cu_it in cu_obj:\n    \n        cu_arr=cu_it.split('::Keys::')\n        print cu_arr\n        cu_out_arr.append(cu_arr\[0])\n        cu_dict\[cu_arr\[0]]=cu_arr\[1]\n        cu_ver\[cu_arr\[0]]=cu_arr\[2]\nelse:\n    print 'No Data'\n\nif res_data=='':\n    mypanel = nukescripts.panels.PythonPanel(str(proj\['ALL']\['GROUP']\[0]))\n    mypanel.addKnob(nuke.CascadingEnumeration_Knob('Get', 'Get' , cu_out_arr))\n    buttonKnob = nuke.PyScript_Knob('Get This')\n    buttonKnob.setValue('push(mypanel,node,cu_dict,cu_ver)')\n    mypanel.addKnob(buttonKnob)\n    mypanel.showModal()\nelse:\n    cur_vers=node.knob('version_info').value()\n    node.knob('version_info').setValues(\[])\n    ver_arr=eval(cu_ver\[dbox])\n    ver_arr.sort()\n    ver_arr.insert(0,'lv')\n    ver_arr.insert(0,'vld')\n    node.knob('version_info').setValues(ver_arr)\n    node.knob('version_info').setValue(cur_vers)\n\n    node.knob('cu_info').setValue(str(cu_dict\[dbox]))\n    \n    data_br=json.loads(node.knob('set').value().replace('\\'','\\\"'))\n    a=get_de_str( dbox.split('::')\[0] , data_br\['b'] , ver_arr , cu_dict\[dbox] , r_rul , proj\['ALL']\['GROUP']\[0] , proj\['ALL']\['PROJ']\[0] , node)\n    \n    get_sett=json.loads(a)\n    node.knob('set').setVisible(True)\n    if ('f' not in get_sett) and ('set' not in get_sett):\n        node.knob('set').setVisible(False)\n       \n    node.knob('set').setValue(a)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
 addUserKnob {1 cu_info l "Multy Data Keys" +INVISIBLE}
 addUserKnob {1 frame_format l "Frame Format" +INVISIBLE}
 addUserKnob {1 set l Set}
 addUserKnob {4 version_info l Versions M {""}}
 addUserKnob {22 valid_this l "Valid This" -STARTLINE}
 addUserKnob {22 apply_data l "Apply Data" T "import cooper_data as cu_dat\nimport pyseq\nimport json\nimport nuke\nimport re\nimport os\nimport nukescripts\nimport re\nimport pyseq\nimport glob\n\n\ndef get_result_settings(proj_data , in_setting , data_box_name , de_rule ):\n    dict_out=\{\}\n    in_sett_dict=json.loads(in_setting)\n\n    init_cuper = cu_init.Cooper_Globals()  \n    cu_proj = init_cuper\['cooper_proj']\n    data_path=str(cu_proj)+str(proj_data\['ALL']\['PROJ']\[0])+'/'+str(proj_data\['ALL']\['GROUP']\[0])+'/'+str(data_box_name)+'.dbox'\n    dict_out=\{\}\n\n    dat=\{\}\n    with open(data_path) as f:\n        dat = json.load(f)\n    print dat\n    if 'de_rule' in dat:\n        if de_rule in dat\['de_rule']:\n            dict_out=dat\['de_rule']\[de_rule]\n    \n    for i in in_sett_dict.keys():\n        dict_out\[i]=in_sett_dict\[i]\n\n    return dict_out\n\n\n\n\n\ndef set_frame_range(file,node):\n    print file\n    files_arr=\[]\n\n    file_arr = re.split(r'%\\d\{2\}d',file)\n    if len(file_arr)<2:\n        file_arr = re.split(r'\\\$F\\d\{1\}',file)\n        if len(file_arr)<2:\n            file_arr = re.split(r'####',file)\n\n\n\n\n    re_file = str(file_arr\[0])+str('*')+str(file_arr\[1])\n    print re_file\n    files_arr=glob.glob(re_file)\n    if files_arr==\[]:\n        print '     File No Exist For Frame Range'\n        return 0\n    s = pyseq.Sequence(files_arr)\n\n    print s.format(format='%h%p%t %r %04l %m')\n    start = s.format(format='%h%p%t %r').split(' ')\[1].split('-')\[0]\n    end = s.format(format='%h%p%t %r').split(' ')\[1].split('-')\[1]\n    \n    node\['first'].setValue(int(start))\n    node\['last'].setValue(int(end))\n    node\['origfirst'].setValue(int(start))\n    node\['origlast'].setValue(int(end))\n    \n\n\n\n\n\n\n\n\n\ncu_objects=\[]\n\nnode=nuke.thisNode()\n#node=nuke.selectedNode()\n\n\n\nres_obj=node.knob('result_data').value()\nget_rule=node.knob('version_info').value()\nproj_data=json.loads(node.knob('proj_data').value())\n\nset_str=str(node.knob('set').value())\nset_dict=json.loads(str(node.knob('set').value()))\n\n\n\n#####____GET_VELOSITY_FROM_ATTR___IF VEL_EXIST____\nif 'v' in set_dict:\n    set_dict\['v']=get_rule\n    set_str=json.dumps(set_dict)\nif 'set' in set_dict:\n    node.knob('cu_info').setValue(json.dumps(set_dict\['set'].keys()))\n\n\n    \nre_rule=str(node.knob('re_rule').value())\n\nattrib_mode=node.knob('cu_mode').value()\nmulty_data_str=node.knob('cu_info').value()\n\nversion_str_in=node.knob('version_info').values()\n\nversion_str_in.remove('vld')\nversion_str_in.remove('lv')\nversion_str=str(version_str_in)\n\nobjects_branches=res_obj.split('::')\n\nfin_sett=get_result_settings(proj_data , set_str , res_obj , re_rule )\n\n####_________def ApplyData( proj_data , dbox_name ,dbox_brache , version_rule , frame_format , app_mode , multydata_str , version_str)_________\napp_arr = cu_dat.ApplyData(proj_data , res_obj , fin_sett\['b'] , fin_sett\['v'] , fin_sett\['f'] ,  attrib_mode , multy_data_str , version_str)\nprint fin_sett\n\nget_set_setting=fin_sett\['set']\n\ncreate_node=\{\}\n\nfor i_key in get_set_setting.keys():\n    file_node=get_set_setting\[i_key]\n    create_node\[i_key]=\[file_node.split('.')\[0],file_node.split('.')\[1]]\n\nprint create_node\n\n\n\n    \n\n\ncu_objects=\[]\n\n\n\n\nn_x=node.knob(\"xpos\").value()\nn_y=node.knob(\"ypos\").value()\n\n\nbw=120\nnode.knob(\"bdwidth\").setValue(bw)\ni=0\na=0\narr=0\nfor it in app_arr.keys():\n    if it not in create_node:\n        print 'This Key Not Exist'\n        continue\n    if create_node\[it]\[0] !='':\n        node_name=create_node\[it]\[0]\n    else:\n        node_name=str(node.name())+'_'+str(res_obj)+\"_\"+it\n    my_node=nuke.toNode(node_name)\n\n    if my_node == None:\n        \n        if attrib_mode=='Get':\n            my_node=nuke.createNode('Read')\n            set_frame_range( app_arr\[it] , my_node)\n        else:\n            my_node=nuke.createNode('Write')\n\n    if attrib_mode=='Get':\n\n        set_frame_range( app_arr\[it] , my_node)\n\n\n\n    my_node\['name'].setValue(node_name)\n    \n        \n    nw=my_node.width()\n    nh=my_node.height() \n    my_node.knob(\"xpos\").setValue(n_x+20+i)\n    my_node.knob(\"ypos\").setValue(n_y+50)\n        \n    i=i+120\n    a=a+1\n    if (my_node.knob(create_node\[it]\[1])!=None):\n        my_node.knob(create_node\[it]\[1]).setValue(app_arr\[it])    \n    arr=arr+1\n   \nnode.knob(\"bdwidth\").setValue(bw*a)\n\n\n        \n    " +STARTLINE}
 addUserKnob {20 data_box_register l "Data Box Register"}
 addUserKnob {1 reg_proj l Project}
 addUserKnob {1 reg_group_name l "Group Name" -STARTLINE}
 addUserKnob {22 reg_where_am_i l "Where Am I" -STARTLINE T "import os\nimport sys\n\n\nimport cooper_monitors as cu_moni\nimport cooper_init as cu_init\n\nimport json\nimport re\n\n\n\n\nscript_name=nuke.root().knob('name').value()\n\n\nnode=nuke.thisNode()\n#node=nuke.selectedNode()\n\nwhere_am_i= cu_moni.where_am_i(os.path.dirname(script_name))\nif where_am_i != \{\} :\n    node.knob('reg_proj').setValue(where_am_i\['PRJ'])\n    node.knob('reg_group_name').setValue(where_am_i\['GROUP'])\nelse:\n    node.knob('reg_proj').setValue('not_found')\n    node.knob('reg_group_name').setValue('not_found')\n"}
 addUserKnob {1 reg_data_name l "Data Name"}
 addUserKnob {2 reg_data_rule l "Data Rule"}
 addUserKnob {22 create_update_data_box l "Create\\Update Data" T "import os\nimport sys\nimport nuke\nimport cooper_data as cu_dat\nimport cooper_init as cu_init\n\nimport json\nimport re\n\n\n\n#node=nuke.selectedNode()\nnode=node=nuke.thisNode()\nreg_data=\{\}\nnode.knob('group_name').value()\ncu_reg_proj_name=node.knob('reg_proj').value()\ncu_reg_group_name=node.knob('reg_group_name').value()\n\ncu_reg_data_path=cu_reg_proj_name+str('/')+cu_reg_group_name\n\ncu_reg_data_name=node.knob('reg_data_name').value()\ncu_reg_data_rule=node.knob('reg_data_rule').value()\n\ninit_cuper = cu_init.Cooper_Globals() \n\n\n\ndirectory_name = init_cuper\['cooper_proj'] + '/' + str(cu_reg_data_path)\ndata_name = str(directory_name) + '/' + str(cu_reg_data_name) + '.dbox'\n\nif not os.path.exists(directory_name):\n    os.makedirs(directory_name)\n    \nif not os.path.exists(data_name):\n    reg_data\['rule']=str(cu_reg_data_rule)\n    reg_data\['valid_version']='0000'\n    \n    with open(data_name, \"w\") as write_file:\n        json.dump(reg_data, write_file ,indent=4)\n    \nelse:\n    with open(data_name) as f:\n        data_file = json.load(f)\n    \n    data_file\['rule']=cu_reg_data_rule\n    with open(data_name, \"w\") as write_file:\n        json.dump(data_file, write_file ,indent=4)" +STARTLINE}
 addUserKnob {20 low_lewel l "Low Lewel"}
}
